// Code generated by capnpc-go. DO NOT EDIT.

package graph

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Message for broadcast over the graph
type Message struct{ capnp.Struct }

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd7bf4580016da0c7

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd7bf4580016da0c7, s.Struct)
	return str
}

func (s Message) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s Message) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Message) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s Message) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Message) Body() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Message) HasBody() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBody(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xd7bf4580016da0c7, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

const schema_f9eb5f58886df78d = "x\xda4\x8a\xb1J\xf3`\x18F\x9f\xe7\xfd\xd2\xbf\x14" +
	"Z\xfa\x07\x0b\x16\x17?\x1c\x0bZ\xba\x89S\x05\x0b\x0a" +
	"\x16\xfa\x82\x83\x93\xf2\xb5\x89I\x87\x98\x98\x14\xc1\xcdI" +
	"Dp\xf2\x02\xf4\x0e\xbc\x02q\x12\xef@/\xc2\xc9I" +
	"\x1cJD\xd4\xed\x9c\xc3\xf9\x7f\xd1\x97^eQ\x00m" +
	"W\xfe\x95\xcfw\x09\xcf\x07\x8f\xaf\xd06\xa5\xbc\xfeH" +
	".\xf7\x0f\xdf>Qa\x15\xe8\xbd\x0b\xfdy\xd5\x9f/" +
	"/\xac\xf2\x1e\xeb\xa5\xcb\xa6\xdd(w\x99\x89\xbbIX" +
	"\x14.\x0a\xd7&.;\xce6\x86?\x86\x11\xa9\x1e\xa5" +
	"<\xb8\xb9\xd5\x87\x97\xab'\xa8'\xdc\xb4d\x1d\xe8\xb1" +
	"\xc3\xf2w\xb4\xe6(\xcd\xed8O]0q\xc5\xcc\xa6" +
	"\xa7angqh\xa3f\xee\xb2\x18\xd0\xba\xf1\x00\x8f" +
	"\x80?X\x02\xb4o\xa8\xbbB\x9fl\xf1;\xee\xac\x00" +
	"\xbae\xa8#!\xa5E\x01\xfca\x07\xd0mC\xdd\x13" +
	"\x9ai\xc0\x1a\x845\xb0Z\x84'\x7f\xdc\x1c\xa7\xc1\x19" +
	"\x1b\x106\xc0\xaf\x00\x00\x00\xff\xff\xa4\x04>\xc6"

func init() {
	schemas.Register(schema_f9eb5f58886df78d,
		0xd7bf4580016da0c7)
}
